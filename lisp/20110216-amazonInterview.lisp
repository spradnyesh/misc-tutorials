#|(sample-results
 ((merge-arrays '(1 2 3 4 5) '(-1 6 7 -1 -1 8 9 -1 -1))
  (1 2 3 4 5 6 7 8 9))
 ((merge-arrays '(5 6 7 8 9) '(-1 1 2 -1 -1 3 4 -1 -1))
  (1 2 3 4 5 6 7 8 9))
 ((merge-arrays '(3 5 16 27 49) '(-1 1 4 -1 -1 13 19 -1 -1))
  (1 3 4 5 13 16 19 27 49))
 ((merge-arrays '(5 6 7 ) '(-1 1 2 -1 3 4 -1))
  (1 2 3 4 5 6 7)))|#

(defun compress-array (arr p q)
  (let ((end (- (+ p q) 1)))
    (do ((ptr end)
         (i end (decf i)))
        ((< i 0) arr)
      (when (> (nth i arr) 0)
        (setf (nth ptr arr) (nth i arr))
        (setf (nth i arr) -1)
        (decf ptr)))))
(defun merge-arrays (a b)
  (let ((p (length a))
        (q (length b)))
    (setf b (compress-array b p (- q p)))
    (let ((a-ptr 0)
          (b-ptr (length a))
          (final-ptr 0 ))
      (do ()
          ((not (and (< a-ptr p)
                     (< b-ptr q))))
        (if (< (nth a-ptr a) (nth b-ptr b))
            (progn
              (setf (nth final-ptr b) (nth a-ptr a))
              (incf a-ptr))
            (progn
              (setf (nth final-ptr b) (nth b-ptr b))
              (incf b-ptr)))
        (incf final-ptr))
      (dotimes (i (- p a-ptr))
        (setf (nth final-ptr b) (nth a-ptr a))
        (incf a-ptr)
        (incf final-ptr))
      (dotimes (i (- q b-ptr))
        (setf (nth final-ptr b) (nth b-ptr b))
        (incf b-ptr)
        (incf final-ptr))
      ))
  b)
