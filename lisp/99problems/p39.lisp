(defpackage :99problems
  (:use :common-lisp
        :it.bese.FiveAM))
(in-package :99problems)

(def-suite prime-list)
(in-suite prime-list)
(test test-is-prime ()
      (is (null (is-prime 4)))
      (is (null (is-prime 0)))
      (is (is-prime 1))
      (is (is-prime 7)))
(test test-next-prime ()
      (is (= 3 (next-prime 2)))
      (is (= 5 (next-prime 3))))
(test test-prime-list ()
      (is (equal '(1 2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97)
              (prime-list 1 100))))
(run! 'prime-list)


(defun is-prime-helper (n k s)
  (cond ((= k s) t)
        ((and (> k 1)
              (zerop (mod n k)))
         nil)
        (t (is-prime-helper n (incf k) s))))
(defun is-prime (n)
  (is-prime-helper n 2 (1+ (floor (sqrt n)))))
(defun next-prime (k)
  (if (is-prime (1+ k))
      (1+ k)
      (next-prime (1+ k))))
(defun prime-list (m n)
  (let ((p (next-prime (1- m))))
    (when (<= p n)
      (cons p (prime-list (1+ p) n)))))
