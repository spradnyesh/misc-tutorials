(defpackage :99problems
  (:use :common-lisp
        :it.bese.FiveAM))
(in-package :99problems)

(def-suite goldbach)
(in-suite goldbach)
(test test-is-prime ()
      (is (null (is-prime 4)))
      (is (null (is-prime 0)))
      (is (is-prime 1))
      (is (is-prime 7)))
(test test-next-prime ()
      (is (= 3 (next-prime 2)))
      (is (= 5 (next-prime 3))))
(test test-goldbach ()
      (is (equal '(1 1) (goldbach 2)))
      (is (equal '(5 23) (goldbach 28))))
(run! 'goldbach)

(defun is-prime-helper (n k s)
  (cond ((= k s) t)
        ((and (> k 1)
              (zerop (mod n k)))
         nil)
        (t (is-prime-helper n (incf k) s))))
(defun is-prime (n)
  (is-prime-helper n 2 (1+ (floor (sqrt n)))))
(defun next-prime (k)
  (if (is-prime (1+ k))
      (1+ k)
      (next-prime (1+ k))))
(defun goldbach-helper (m n)
  (let* ((p (next-prime m))
         (n-p (- n p)))
    (if (is-prime n-p)
        (list p n-p)
        (goldbach-helper p n))))
(defun goldbach (n)
  (goldbach-helper 0 n))
