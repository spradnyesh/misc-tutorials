(defpackage :99problems
  (:use :common-lisp
        :it.bese.FiveAM))
(in-package :99problems)

(def-suite truth-tables)
(in-suite truth-tables)
(test test-and ()
      (is (null (and/2 nil nil)))
      (is (null (and/2 nil t)))
      (is (null (and/2 t nil)))
      (is (and/2 t t)))
(test test-or ()
      (is (null (or/2 nil nil)))
      (is (or/2 nil t))
      (is (or/2 t nil))
      (is (or/2 t t)))
(test test-nand ()
      (is (nand/2 nil nil))
      (is (nand/2 nil t))
      (is (nand/2 t nil))
      (is (null (nand/2 t t))))
(test test-nor ()
      (is (nor/2 nil nil))
      (is (null (nor/2 nil t)))
      (is (null (nor/2 t nil)))
      (is (null (nor/2 t t))))
(test test-xor ()
      (is (null (xor/2 nil nil)))
      (is (xor/2 nil t))
      (is (xor/2 t nil))
      (is (null (xor/2 t t))))
(test test-impl ()
      (is (impl/2 nil nil))
      (is (impl/2 nil t))
      (is (null (impl/2 t nil)))
      (is (impl/2 t t)))
(test test-equ ()
      (is (equ/2 nil nil))
      (is (null (equ/2 nil t)))
      (is (null (equ/2 t nil)))
      (is (equ/2 t t)))
(test test-table ()
      (is (equal '(t t t t nil t nil t nil nil nil nil) (table a b '(and a (or a b))))))
(run! 'truth-tables)

(defun and/2 (a b)
  (when (and a b) t))
(defun or/2 (a b)
  (when (or a b) t))
(defun nand/2 (a b)
  (not (and/2 a b)))
(defun nor/2 (a b)
  (not (or/2 a b)))
(defun xor/2 (a b)
  (unless (equal a b) t))
(defun impl/2 (a b)
  (unless (and a (null b)) t))
(defun equ/2 (a b)
  (when (equal a b) t))
(defun logic-eval (oper a b)
  (print "1")
  (case oper
    ("and" (print "here") (and/2 a b))
    ("or" (or/2 a b))
    ("nand" (nand/2 a b))
    ("nor" (nor/2 a b))
    ("xor" (xor/2 a b))
    ("impl" (impl/2 a b))
    ("equ" (equ/2 a b))
    (otherwise (print "inside otherwise"))))

;; TODO: incomplete
(defun table (a b expr)
  ())
