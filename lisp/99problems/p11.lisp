(defun group (lst)
  (cond ((eql (first lst)
              (first (rest lst)))
         (cons (first lst)
               (group (rest lst))))
        (t (list (first lst)))))
(defun from-k (lst k)
  (cond ((< k 0) nil)
        ((= k 0) lst)
        (t (from-k (rest lst) (decf k)))))
(defun modified-encode (lst)
  (cond ((null lst) nil)
        (t (let ((l (group lst)))
             (if (= 1 (length l))
                 (cons (first l)
                         (modified-encode (from-k lst (length l))))
                 (append (list (list (length l) (first l)))
                         (modified-encode (from-k lst (length l)))))))))
