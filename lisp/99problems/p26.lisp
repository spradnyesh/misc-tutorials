(defun element-at (lst n)
  (dotimes (i (1- n) (first lst))
    (setf lst (rest lst))))
(defun remove-at (lst n)
  (let ((l-pre nil))
    (dotimes (i (1- n))
      (setf l-pre (append l-pre (list (first lst))))
      (setf lst (rest lst)))
    (values (first lst) (append l-pre (rest lst)))))
(defun list-to-list-of-lists (lst)
  (cond ((null lst) nil)
        ((and (listp lst)
              (= 1 (length lst)))
         (list lst))
        (t (append (list (list (first lst))) (list-to-list-of-lists (rest lst))))))


(defun permutation-1-fail (n lst)
  (let ((ret nil))
    (dotimes (i (length lst))
      (let ((i-th nil))
        (multiple-value-bind (ele rst-lst)
            (remove-at lst (1+ i))
          (setf i-th (cons ele i-th))
          (dotimes (j n)
            (multiple-value-bind (ele new-rst-lst)
                (remove-at rst-lst (random (1+ (length rst-lst))))
              (setf rst-lst new-rst-lst)
              (setf i-th (cons ele i-th)))))
        (append ret (list i-th))))))

(defun permutation-2-fail (n lst)
  (let ((ret nil))
    (dotimes (i (length lst) ret)
      (let ((i-th nil))
        (multiple-value-bind (ele rst-lst)
            (remove-at (1+ i) lst)
          (setf ret (append (cons ele i-th)
                            (permutation-2 (1- n) rst-lst))))))))

(defun permutation-3 (n lst)
  (cond ((= 1 n)
         (list-to-list-of-lists lst))
        (t
         (let ((ret nil))
           (dotimes (i (length lst) ret)
             (multiple-value-bind (ele rst-lst)
                 (remove-at lst (1+ i))
               (let ((perm-n-1 (permutation-3 (1- n) rst-lst)))
                 (dotimes (j (length perm-n-1))
                   (setf ret (append ret (list (cons ele (element-at perm-n-1 (1+ j))))))))))))))

(defun combination (n lst)
  (cond ((= 1 n)
         (list-to-list-of-lists lst))
        (t
         (do ((ret nil))
             ((> n (length lst))
              ret)
           (multiple-value-bind (ele rst-lst)
               (remove-at lst 1)
             (let ((comb-n-1 (combination (1- n) rst-lst)))
               (dotimes (j (length comb-n-1))
                 (setf ret
                       (append ret
                               (list (cons ele
                                           (element-at comb-n-1
                                                       (1+ j)))))))))
           (setf lst (rest lst))))))
