(defpackage :cd
  (:use :cl))
(in-package :cd)
(defun make-cd (title artist rating ripped)
  (list :title title :artist artist :rating rating :ripped ripped))
(defvar *db* nil)
(defun add-record (cd)
  (push cd *db*))
(defun dump-cds (cds)
  (format t "~{~{~a:~10t~a~%~}~%~}" cds))
(defun dump-db ()
  (dump-cds *db*))
(defun prompt-read (prompt)
  (format *query-io* "~a: " prompt)
  (force-output *query-io*)
  (read-line *query-io*))
(defun prompt-for-cd ()
  (make-cd
   (prompt-read "Title: ")
   (prompt-read "Artist: ")
   (or (parse-integer (prompt-read "Rating: ") :junk-allowed t) 0)
   (y-or-n-p "Ripped [y/n]: ")))
(defun add-cds ()
  (loop (add-record (prompt-for-cd))
     (if (not (y-or-n-p "Another? [y/n]: "))
         (return))))
(defun save-db (filename)
  (with-open-file (out filename
                       :direction :output
                       :if-exists :supersede)
    (with-standard-io-syntax
      (print *db* out))))
(defun load-db (filename)
  (with-open-file (in filename)
    (with-standard-io-syntax
      (setf *db* (read in)))))
(defun select-records (selector-fn)
  (remove-if-not selector-fn *db*))
(defun delete-records (selector-fn)
  (setf *db* (remove-if selector-fn *db*)))
(defun make-comparison-expr (field value)
  `(equal (getf cd ,field) ,value))
(defun make-comparisons-list (fields)
  (loop while fields
       collecting (make-comparison-expr (pop fields) (pop fields))))
(defmacro where (&rest clauses)
     `#'(lambda (cd) (and ,@(make-comparisons-list clauses))))
(defun make-setf-expr (field value)
  `(setf (getf cd ,field) ,value))
(defun make-setf-list (fields)
  (loop while fields
       collecting (make-setf-expr (pop fields) (pop fields))))
(defmacro update-records (&rest clauses)
  (setf *db*
        (mapcar
         `#'(lambda (cd) (when (funcall selector-fn cd) ,@(make-setf-list clauses)) cd *db*))))
