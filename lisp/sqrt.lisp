(defun square (x)
  (* x x))
(defun my-average (x y)
  (/ (+ x y) 2))
(defun improve (guess x)
  (my-average guess (/ x guess)))
(defun good-enough? (guess x)
  (< (abs (- (square guess) x)) 0.001))
(defun sqrt-iter (guess x)
  (if (good-enough? guess x)
      guess
      (sqrt-iter (improve guess x)
                 x)))
(defun my-sqrt (x)
  (sqrt-iter 1.0 x))


(defun new-if (predicate then-clause else-clause)
  (cond (predicate then-clause)
        (t else-clause)))
(defun sqrt-iter (guess x)
  (new-if (good-enough? guess x)
          guess
          (sqrt-iter (improve guess x)
                     x)))
