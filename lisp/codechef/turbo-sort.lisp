#|(let ((n (read))
      (lst nil))
  (dotimes (i n)
    (push (read) lst))
  (setf lst (sort lst #'<))
  (dotimes (i n)
    (format t "~A~%" (nth i lst))))|#
(defvar *sorted-arr* nil)
(defvar *length* 0)
(defun binary-search (n start end)
  (let ((mid (+ start (floor (- end start) 2))))
    (if (= start mid)
        (1+ start)
        (if (< n (aref *sorted-arr* mid))
            (binary-search n start mid)
            (binary-search n mid end)))))
(defun insert-into (n pos)
  (let ((tmp-array (make-array (1+ *length*))))
    (dotimes (i pos)
      (setf (aref tmp-array i) (aref *sorted-arr* i)))
    (setf (aref tmp-array pos) n)
    (dotimes (i (- *length* pos))
      (setf (aref tmp-array (1+ (+ pos i))) (aref *sorted-arr* (+ pos i))))
    (setf *sorted-arr* tmp-array)))
(defun turbo-sort (n)
  (insert-into n (binary-search n 0 (1- (length *sorted-arr*)))))
(let ((n (read)))
  (setf *sorted-arr* (make-array n))
  (dotimes (i n)
    (incf *length*)
    (format t "~A~%" (turbo-sort (read))))
  (dotimes (i n)
    (format t "~A~%" (aref *sorted-arr* i))))
