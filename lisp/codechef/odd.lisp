#|(defun single-pass (lst)
  (when (> (length lst) 1)
      (cons (second lst) (single-pass (rest (rest lst))))))|#
(defun single-pass (lst)
  (let ((rslt nil))
    (dotimes (i (/ (length lst) 2) rslt)
      (pop lst)
      (setf rslt (append rslt (list (pop lst)))))))
(defun trim (lst)
  (loop do (setf lst (single-pass lst))
       while (> (length lst) 1))
  lst)
(defun make-num-list (n)
  (let ((lst nil))
    (dotimes (i n lst)
      (setf lst (append lst (list (1+ i)))))))
(let ((n (read)))
  (dotimes (i n)
    (format t "~A~%" (trim (make-num-list (read))))))
