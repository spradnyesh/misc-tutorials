(defun count-leaves (x)
  (cond ((null x) 0)
        ((not (typep x 'cons)) 1)
        (t (+ (count-leaves (car x))
              (count-leaves (cdr x))))))
(defun fringe (tree)
  (helper '() tree))
(defun helper (result tree)
  (cond ((null tree) result)
        ((not (consp (car tree)))
         (helper (append result (list (car tree))) (cdr tree)))
        (t (helper (append result (helper '() (car tree)))
                   (cdr tree)))))
(defun enumerate-tree (tree) ;;same effect as fringe+helper above, but much easier to understand
  (cond ((null tree) nil)
        ((not (consp tree)) (list tree))
        (t (append (enumerate-tree (car tree))
                   (enumerate-tree (cdr tree))))))
(defun scale-tree (tree factor)
  (cond ((null tree) nil)
        ((not (consp tree)) (* tree factor))
        (t (cons (scale-tree (car tree) factor)
                 (scale-tree (cdr tree) factor)))))
