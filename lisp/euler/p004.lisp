(defun is-palindrome (str)
  (let ((l (length str)))
    (dotimes (i (floor (/ l 2)))
      (unless (eql (aref str i) (aref str (- l i 1)))
        (return-from is-palindrome nil)))
    t))
(defun is-number-palindrome (n)
  (if (numberp n)
      (is-palindrome (write-to-string n))
      nil))
(defun p004 (low high)
  (let ((largest 0))
    (do ((i low (1+ i)))
        ((= i high) largest)
      (do* ((j low (1+ j))
           (product (* i j) (* i j)))
          ((= j high))
        (when (and (is-number-palindrome product)
                   (> product largest))
          (setf largest product))))))
